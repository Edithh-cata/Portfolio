{
    "pageProps": {
      "post": {
        "source": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    hr: \"hr\",\n    h3: \"h3\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"dependências-de-produção-vs-de-desenvolvimento\",\n      children: _jsx(_components.a, {\n        href: \"#dependências-de-produção-vs-de-desenvolvimento\",\n        children: \"Dependências de produção vs. de desenvolvimento\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/dependencias-de-producao-vs-de-desenvolvimento.png\",\n        alt: \"Banner da postagem\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Em projetos Node.js, é fundamental distinguir entre dois tipos de dependências: \\\"dependencies\\\" e \\\"devDependencies\\\". Essas propriedades desempenham um papel crucial ao listar as dependências que seu projeto requer, seja para operar em ambiente de produção ou no contexto de desenvolvimento.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"dependências-de-produção\",\n      children: _jsx(_components.a, {\n        href: \"#dependências-de-produção\",\n        children: \"Dependências de produção\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"São aquelas dependências que precisam estar em produção para que seu projeto funcione. Por exemplo, o framework Tailwind CSS se enquadra nessa categoria. Para instalar um pacote de produção, basta utilizar o seguinte comando no seu terminal:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-css\",\n        children: [\"npm install <pacote> \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"--save\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ao executar este comando, o pacote é automaticamente registrado no arquivo package.json, na seção de \\\"dependencies\\\" (a partir do npm 5 em diante; anteriormente, você precisava especificar manualmente com a opção --save).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"dependencies\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"pacote\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^0.1.1\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Quando você instala um pacote usando o comando \\\"npm install pacote\\\", ele é configurado como uma dependência de produção por padrão.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"dependências-de-desenvolvimento\",\n      children: _jsx(_components.a, {\n        href: \"#dependências-de-desenvolvimento\",\n        children: \"Dependências de desenvolvimento\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As dependências de desenvolvimento consistem em pacotes que não precisam ser incluídos na produção do seu projeto. Esses módulos são utilizados exclusivamente durante o processo de desenvolvimento, auxiliando em tarefas como testes, pré-processamento, webpack ou Babel.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Para adicionar uma dependência de desenvolvimento ao arquivo package.json, você pode simplesmente utilizar a flag \\\"-D\\\" ou \\\"--save-dev,\\\" como exemplificado abaixo:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-css\",\n        children: [\"npm install <pacote> \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"--save-dev\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ao utilizar essa flag, o pacote é registrado no arquivo package.json sob a seção de \\\"devDependencies.\\\"\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"devDependencies\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"pacote\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"~0.1.1\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Este procedimento torna claro que o pacote é destinado apenas para uso em ambiente de desenvolvimento, proporcionando uma gestão limpa e eficaz das dependências do projeto.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"momento-anúncio-\",\n      children: _jsx(_components.a, {\n        href: \"#momento-anúncio-\",\n        children: \"Momento anúncio 😁🤘\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Quer aprender desenvolvimento frontend do zero?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"O \", _jsx(_components.a, {\n        href: \"https://iuricode.com/efront/\",\n        children: \"eFront\"\n      }), \" é um ebook criado por mim onde eu ensino \", _jsx(_components.strong, {\n        children: \"HTML, CSS, JavaScript, Sass, Bootstrap, React, React Router, TypeScript, styled-components, Tailwind CSS, React Hook Form, Radix UI, Storybook, Cypress e Next.js\"\n      }), \". Tudo isso é ensinado com uma didática simples que até quem está iniciando na área consegue aprender a utilizar cada tecnologia do ebook.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/efront.png\",\n        alt: \"Banner do eFront\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Mais de \", _jsx(_components.strong, {\n        children: \"9.000 pessoas já compraram\"\n      }), \", você vem comigo?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"👉 \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://iuricode.com/efront/\",\n          children: \"Acessar o link da venda\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"informações-adicionais\",\n      children: _jsx(_components.a, {\n        href: \"#informações-adicionais\",\n        children: \"Informações adicionais\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O conteúdo anterior representa a parte fundamental e essencial de um arquivo package.json, mas está longe de abranger todas as possibilidades que você pode explorar. Existem diversas outras opções e informações adicionais que podem ser valiosas ao escrever e configurar o seu package.json, bem como inúmeros detalhes úteis que podem se tornar relevantes no futuro.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Na prática, os comandos mencionados acima adicionam duas novas propriedades ao arquivo package.json, cada uma contendo um objeto distinto: \\\"dependencies\\\" e \\\"devDependencies\\\". Essas propriedades são usadas para listar as dependências de produção e de desenvolvimento de seu projeto, respectivamente.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Além disso, é possível especificar a versão de um pacote durante a instalação. Após o nome do pacote, basta adicionar \\\"@versao-desejada\\\" para instalar uma versão específica.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Também é viável instalar dependências de forma global em seu sistema, o que pode ser feito incluindo a opção \\\"-g\\\" ou \\\"--global\\\" ao instalar uma dependência através do terminal.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dentro dessas duas estruturas, um padrão é seguido, que consiste em um par de \\\"nome\\\" e \\\"versão\\\" para cada pacote. Se você observar com atenção, notará que um deles utiliza o prefixo \\\"^\\\" e o outro usa o prefixo \\\"~\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"O caractere \\\"^\\\" (circunflexo) é usado para especificar uma versão de dependência que permitirá atualizações automáticas para versões futuras compatíveis. Por exemplo, se você definir uma dependência como \\\"^1.2.3\\\", isso indica que o npm (ou o gerenciador de pacotes que estiver utilizando) permitirá atualizações automáticas para qualquer versão igual ou superior a 1.2.3, mas menor do que 2.0.0. Essa abordagem é útil para garantir que você receba correções de bugs e pequenas atualizações, sem o risco de introdução de atualizações que possam causar incompatibilidades significativas.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Já o caractere \\\"~\\\" (til) é empregado para permitir atualizações automáticas para versões futuras de revisão compatíveis. Por exemplo, se você definir uma dependência como \\\"~1.2.3\\\", isso significa que o npm possibilitará atualizações automáticas para qualquer versão igual ou superior a 1.2.3, mas menor do que 1.3.0. Essa abordagem é valiosa quando você deseja receber apenas correções de bugs e atualizações de revisão, sem estar sujeito a atualizações que possam trazer novos recursos ou mudanças substanciais.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"E aí, gostou da postagem? Me manda um feedback no \", _jsx(_components.a, {\n        href: \"https://www.instagram.com/iuricode/\",\n        children: \"Instagram\"\n      }), \" para melhorar cada vez mais! 😁\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Esse projeto é \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/iuricode/blog\",\n          children: \"open source\"\n        })\n      }), \", então basta adicionar uma nova feature e abrir um pull-request. Dessa maneira você irá contribuir com a comunidade.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "meta": {
          "slug": "dependencias-de-producao-vs-de-desenvolvimento",
          "excerpt": "Em projetos Node.js, é fundamental distinguir entre dois tipos de dependências (dependencies e devDependencies).",
          "title": "Dependências de produção vs. de desenvolvimento",
          "tags": ["Config", "Frontend", "Node"],
          "date": "Wed Jan 10 2024 00:00:00 GMT+0000 (Coordinated Universal Time)"
        }
      }
    },
    "__N_SSG": true
  }
  